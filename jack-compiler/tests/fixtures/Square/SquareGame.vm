function SquareGame.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
// let square = Square.new(0, 0, 30)
push constant 0
push constant 0
push constant 30
call Square.new 3
pop this 0
// let direction = 0
push constant 0
pop this 1
// return this
push pointer 0
return
function SquareGame.dispose 0
push argument 0
pop pointer 0
// square.dispose()
push this 0
call Square.dispose 1
// discard return value of the void function
pop temp 0
// Memory.deAlloc(this)
push pointer 0
call Memory.deAlloc 1
// discard return value of the void function
pop temp 0
// return
push constant 0
return
function SquareGame.moveSquare 0
push argument 0
pop pointer 0
// if (direction = 1) { (1 statements...) }
push this 1
push constant 1
eq
if-goto LABEL_15
goto LABEL_16
label LABEL_15
// square.moveUp()
push this 0
call Square.moveUp 1
// discard return value of the void function
pop temp 0
label LABEL_16
// if (direction = 2) { (1 statements...) }
push this 1
push constant 2
eq
if-goto LABEL_17
goto LABEL_18
label LABEL_17
// square.moveDown()
push this 0
call Square.moveDown 1
// discard return value of the void function
pop temp 0
label LABEL_18
// if (direction = 3) { (1 statements...) }
push this 1
push constant 3
eq
if-goto LABEL_19
goto LABEL_20
label LABEL_19
// square.moveLeft()
push this 0
call Square.moveLeft 1
// discard return value of the void function
pop temp 0
label LABEL_20
// if (direction = 4) { (1 statements...) }
push this 1
push constant 4
eq
if-goto LABEL_21
goto LABEL_22
label LABEL_21
// square.moveRight()
push this 0
call Square.moveRight 1
// discard return value of the void function
pop temp 0
label LABEL_22
// Sys.wait(5)
push constant 5
call Sys.wait 1
// discard return value of the void function
pop temp 0
// return
push constant 0
return
function SquareGame.run 2
push argument 0
pop pointer 0
// let exit = false
push constant 0
pop local 1
// while (~exit) { (9 statements...) }
label LABEL_23
push local 1
not
not
if-goto LABEL_24
// while (key = 0) { (2 statements...) }
label LABEL_25
push local 0
push constant 0
eq
not
if-goto LABEL_26
// let key = Keyboard.keyPressed()
call Keyboard.keyPressed 0
pop local 0
// moveSquare()
push pointer 0
call SquareGame.moveSquare 1
// discard return value of the void function
pop temp 0
goto LABEL_25
label LABEL_26
// if (key = 81) { (1 statements...) }
push local 0
push constant 81
eq
if-goto LABEL_27
goto LABEL_28
label LABEL_27
// let exit = true
push constant 1
neg
pop local 1
label LABEL_28
// if (key = 90) { (1 statements...) }
push local 0
push constant 90
eq
if-goto LABEL_29
goto LABEL_30
label LABEL_29
// square.decSize()
push this 0
call Square.decSize 1
// discard return value of the void function
pop temp 0
label LABEL_30
// if (key = 88) { (1 statements...) }
push local 0
push constant 88
eq
if-goto LABEL_31
goto LABEL_32
label LABEL_31
// square.incSize()
push this 0
call Square.incSize 1
// discard return value of the void function
pop temp 0
label LABEL_32
// if (key = 131) { (1 statements...) }
push local 0
push constant 131
eq
if-goto LABEL_33
goto LABEL_34
label LABEL_33
// let direction = 1
push constant 1
pop this 1
label LABEL_34
// if (key = 133) { (1 statements...) }
push local 0
push constant 133
eq
if-goto LABEL_35
goto LABEL_36
label LABEL_35
// let direction = 2
push constant 2
pop this 1
label LABEL_36
// if (key = 130) { (1 statements...) }
push local 0
push constant 130
eq
if-goto LABEL_37
goto LABEL_38
label LABEL_37
// let direction = 3
push constant 3
pop this 1
label LABEL_38
// if (key = 132) { (1 statements...) }
push local 0
push constant 132
eq
if-goto LABEL_39
goto LABEL_40
label LABEL_39
// let direction = 4
push constant 4
pop this 1
label LABEL_40
// while (~key = 0) { (2 statements...) }
label LABEL_41
push local 0
push constant 0
eq
not
not
if-goto LABEL_42
// let key = Keyboard.keyPressed()
call Keyboard.keyPressed 0
pop local 0
// moveSquare()
push pointer 0
call SquareGame.moveSquare 1
// discard return value of the void function
pop temp 0
goto LABEL_41
label LABEL_42
goto LABEL_23
label LABEL_24
// return
push constant 0
return
